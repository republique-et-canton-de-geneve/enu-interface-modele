<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- le groupId doit commencer par "ch.ge.etat" afin que le JAR puisse etre pousse sur Maven Central -->
    <groupId>ch.ge.etat.ael.enu</groupId>
    <artifactId>enu-interface-modele</artifactId>
    <version>0.29</version>
    <packaging>jar</packaging>

    <name>enu-interface-modele</name>
    <description>Mod√®le objet pour l'API externe de l'ENU</description>
    <url>https://github.com/Espace-numerique-de-l-usager/enu-interface-modele</url>

    <licenses>
        <license>
            <name>AGPL-3.0</name>
            <url>https://www.gnu.org/licenses/agpl-3.0.html</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>EdG</name>
            <email>opensource@etat.ge.ch</email>
            <organization>Etat de Geneve, Switzerland</organization>
            <organizationUrl>https://ge.ch</organizationUrl>
        </developer>
    </developers>

    <properties>
        <java.version>8</java.version>
        <version.lombok>1.18.20</version.lombok>
        <version.camel>3.9.0</version.camel>
        <version.spring-boot>2.5.0</version.spring-boot>
        <version.commons-io>2.8.0</version.commons-io>
        <spring-boot.version>2.4.5</spring-boot.version>
        <maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <scm>
        <connection>scm:git:${env.GITLAB_URL}/enu-interface-modele.git</connection>
        <developerConnection>scm:git:${env.GITLAB_URL}/enu-interface-modele.git</developerConnection>
        <url>${env.GITLAB_URL}/enu-interface-modele.git</url>
        <tag>enu-interface-modele-0.29</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>internal.project.release</id>
            <url>${maven2Repository_projet}/project_release</url>
        </repository>
        <snapshotRepository>
            <id>internal.project.snapshot</id>
            <url>${maven2Repository_projet}/project_snapshot</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Lombok BOM -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${version.lombok}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Spring Boot deps -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>1.5.10</version>
        </dependency>

        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
        </dependency>

        <!-- Outillage de dev + tests -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Profil special, pour deployer les JAR sur Maven Central, via OSSRH -->
            <id>maven-central</id>
            <distributionManagement>
                <snapshotRepository>
                    <id>ossrh</id>
                    <url>https://oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
                <repository>
                    <id>ossrh</id>
                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
                </repository>
            </distributionManagement>
            <build>
                <plugins>
                    <!-- Deployer egalement un JAR contenant les sources (exige par Sonatype) -->
                    <plugin>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>3.0.1</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Deployer egalement un JAR contenant la javadoc (exige par Sonatype) -->
                    <plugin>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Signer les livrables via GPG (exige par Sonatype)
                         Ne fonctionne pas en local, uniquement depuis le serveur IC.
                         La valeur de "gpg.keyname" est fournie dans le fichier .m2/settings.xml.
                      -->
                    <plugin>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.0.1</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <keyname>${gpg.keyname}</keyname>
                                    <passphraseServerId>${gpg.keyname}</passphraseServerId>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Ne pas utiliser le plugin maven-deploy-plugin habituel... -->
                    <plugin>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>2.8.2</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- ... mais utiliser plutot le plugin de Sonatype, qui non seulement deploie sur
                         OSSRH (comme le fait le maven-deploy-plugin), mais en plus fait un close
                         du repository OSSRH et propage le deploiement sur Maven Central...
                      -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>1.6.8</version>
                        <extensions>true</extensions>
                        <executions>
                            <execution>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>deploy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <serverId>ossrh</serverId>
                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                            <autoReleaseAfterClose>true</autoReleaseAfterClose>
                        </configuration>
                    </plugin>
                    <!-- ... moyennant une configuration adequate du maven-release-plugin : sans le release profile
                         par defaut. Voir https://central.sonatype.org/publish/publish-maven
                      -->
                    <plugin>
                        <artifactId>maven-release-plugin</artifactId>
                        <version>2.5.3</version>
                        <configuration>
                            <autoVersionSubmodules>true</autoVersionSubmodules>
                            <useReleaseProfile>false</useReleaseProfile>
                            <releaseProfiles>maven-central</releaseProfiles>
                            <goals>deploy</goals>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
